// THIS FILE IS AUTO GENERATED BY GK-CLI DO NOT EDIT!!
package endpoint

import (
	endpoint "github.com/go-kit/kit/endpoint"
	service "todo_SELF/auth/pkg/service"
)

// Endpoints collects all of the endpoints that compose a profile service. It's
// meant to be used as a helper struct, to collect all of the endpoints into a
// single parameter.
type Endpoints struct {
	RegisterEndpoint                endpoint.Endpoint
	LoginEndpoint                   endpoint.Endpoint
	AccessEndpoint                  endpoint.Endpoint
	LogoutEndpoint                  endpoint.Endpoint
	UserRegistrationAttemptEndpoint endpoint.Endpoint
	FetchUsersEndpoint              endpoint.Endpoint
	BlockUserEndpoint               endpoint.Endpoint
	UnblockUserEndpoint             endpoint.Endpoint
	RegisterNewUserFormEndpoint     endpoint.Endpoint
	UserLoginFormEndpoint           endpoint.Endpoint
	UserRegisterFormEndpoint        endpoint.Endpoint
}

// New returns a Endpoints struct that wraps the provided service, and wires in all of the
// expected endpoint middlewares
func New(s service.AuthService, mdw map[string][]endpoint.Middleware) Endpoints {
	eps := Endpoints{
		AccessEndpoint:                  MakeAccessEndpoint(s),
		BlockUserEndpoint:               MakeBlockUserEndpoint(s),
		FetchUsersEndpoint:              MakeFetchUsersEndpoint(s),
		LoginEndpoint:                   MakeLoginEndpoint(s),
		LogoutEndpoint:                  MakeLogoutEndpoint(s),
		RegisterEndpoint:                MakeRegisterEndpoint(s),
		RegisterNewUserFormEndpoint:     MakeRegisterNewUserFormEndpoint(s),
		UnblockUserEndpoint:             MakeUnblockUserEndpoint(s),
		UserLoginFormEndpoint:           MakeUserLoginFormEndpoint(s),
		UserRegisterFormEndpoint:        MakeUserRegisterFormEndpoint(s),
		UserRegistrationAttemptEndpoint: MakeUserRegistrationAttemptEndpoint(s),
	}
	for _, m := range mdw["Register"] {
		eps.RegisterEndpoint = m(eps.RegisterEndpoint)
	}
	for _, m := range mdw["Login"] {
		eps.LoginEndpoint = m(eps.LoginEndpoint)
	}
	for _, m := range mdw["Access"] {
		eps.AccessEndpoint = m(eps.AccessEndpoint)
	}
	for _, m := range mdw["Logout"] {
		eps.LogoutEndpoint = m(eps.LogoutEndpoint)
	}
	for _, m := range mdw["UserRegistrationAttempt"] {
		eps.UserRegistrationAttemptEndpoint = m(eps.UserRegistrationAttemptEndpoint)
	}
	for _, m := range mdw["FetchUsers"] {
		eps.FetchUsersEndpoint = m(eps.FetchUsersEndpoint)
	}
	for _, m := range mdw["BlockUser"] {
		eps.BlockUserEndpoint = m(eps.BlockUserEndpoint)
	}
	for _, m := range mdw["UnblockUser"] {
		eps.UnblockUserEndpoint = m(eps.UnblockUserEndpoint)
	}
	for _, m := range mdw["RegisterNewUserForm"] {
		eps.RegisterNewUserFormEndpoint = m(eps.RegisterNewUserFormEndpoint)
	}
	for _, m := range mdw["UserLoginForm"] {
		eps.UserLoginFormEndpoint = m(eps.UserLoginFormEndpoint)
	}
	for _, m := range mdw["UserRegisterForm"] {
		eps.UserRegisterFormEndpoint = m(eps.UserRegisterFormEndpoint)
	}
	return eps
}
